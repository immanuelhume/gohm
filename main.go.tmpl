package gohm

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/go-redis/redis/v8"
	"github.com/google/uuid"

	{{ .TemplateImports }}
)

type GohmClient struct {
	*redis.Client

	{{ .TemplateGohmFields }}
}

// Works just like redis.NewClient and returns a client.
func NewClient(opt *redis.Options) *GohmClient {
	redisClient := redis.NewClient(opt)

	gohmClient := &GohmClient{
		redisClient, 
		{{ range .Entities -}}
		&{{ .Name.Name }}{rdb: redisClient},
		{{ end }}
		}
	
	return gohmClient
}

{{ range .Entities }}
{{ $lower := toLower .Name.Name }}
{{ $rcv := toReceiverCase .Name.Name}}
type {{ .Name.Name }} struct {
	rdb *redis.Client
}

func({{ $rcv }} *{{ .Name.Name }}) Create(ctx context.Context, {{ $lower }} *{{ .NamespacedEntity }}) error {
	pipe := {{ $rcv }}.rdb.Pipeline()
	enKey := genKey("{{ .Name.Name }}", uuid.NewString())
	{{ $lower }}Map := mapStruct({{ $lower }})
	for k, v := range {{ $lower }}Map {
		pipe.SAdd(ctx, genKey("{{ .Name.Name }}", k, v), enKey)
	}
	pipe.HSet(ctx, enKey, {{ $lower }}Map)
	_, err := pipe.Exec(ctx)
	return err
}
{{ end }}

// For use in redis.HSet. Produces a map from the fields of a struct.
func mapStruct(i interface{}) map[string]interface{} {
	v := reflect.Indirect(reflect.ValueOf(i))
	t := v.Type()

	res := make(map[string]interface{})
	for i := 0; i < v.NumField(); i++ {
		res[t.Field(i).Name] = v.Field(i).Interface()
	}
	return res
}

// Helper function to insert ':' for redis keys.
func genKey(tags ...interface{}) string {
	n := len(tags)
	sl := []string{}
	for i := 0; i < n; i++ {
		sl = append(sl, "%v")
	}
	format := strings.Join(sl, ":")
	return fmt.Sprintf(format, tags...)
}