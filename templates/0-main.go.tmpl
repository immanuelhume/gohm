package gohm

import (
	"context"
	"fmt"
	"reflect"
	"strconv"
	"strings"

	"github.com/go-redis/redis/v8"
	"github.com/google/uuid"

	{{ .TImports }}
)

type GohmClient struct {
	*redis.Client

	{{ .TGohmFields }}
}

// Works just like redis.NewClient and returns a Redis client.
func NewClient(opt *redis.Options) *GohmClient {
	redisClient := redis.NewClient(opt)

	gohmClient := &GohmClient{
		redisClient, 
		{{ range .Models -}}
		&{{ .Name.Name }}{rdb: redisClient},
		{{ end }}
		}
	
	return gohmClient
}

{{ range .Models -}}

{{ $model := .Name.Name}}
{{ $nsmodel := .TNamespacedModel }}
{{ $numodel := lowerFirst .Name.Name }}
{{ $rcv := toReceiverCase .Name.Name -}}

type {{ $model }} struct {
	rdb *redis.Client
}

// Saves one {{ $model }} into Redis. Returns either an error or nil.
func({{ $rcv }} *{{ $model }}) Save(ctx context.Context, {{ $numodel }} *{{ $nsmodel }}) error {
	_pipe := {{ $rcv }}.rdb.Pipeline()
	_mKey := genKey("{{ $model }}", uuid.NewString())
	_vMap, err := stringify{{ $model }}({{ $numodel }})
	if err != nil {
		return err
	}

	for k, v := range _vMap {
		_pipe.SAdd(ctx, genKey("{{ $model }}", k, v), _mKey)
	}
	_pipe.HSet(ctx, _mKey, _vMap)

	_, err = _pipe.Exec(ctx)
	return err
}

{{ $findopt := printf "%s%s" $model "FindOpt" -}}

// Returns a slice of all {{ $model }} models which fulfill the provided filter conditions.
func({{ $rcv }} *{{ $model }}) FindMany(ctx context.Context, filter *{{ $findopt }}) ([]{{ $nsmodel }}, error) {
	_v := reflect.ValueOf(filter).Elem()
	_t := _v.Type()

	_pipe := {{ $rcv }}.rdb.Pipeline()
	var _cmds []*redis.StringSliceCmd
	var _hits [][]string

	var _raw []*redis.StringStringMapCmd
	var _results []{{ $nsmodel }}

	for i := 0; i < _v.NumField(); i++ {
		_val := _v.Field(i)
		if _val.IsNil() {
			continue
		}
		_field := _t.Field(i).Name

		_key := genKey("{{ $model }}", _field, _val.Elem())
		_cmds = append(_cmds, _pipe.SMembers(ctx, _key))
	}

	_, err := _pipe.Exec(ctx)
	if err != nil {
		return nil, err
	}

	for _, cmd := range _cmds {
		_hits = append(_hits, cmd.Val())
	}
	_keys := intersect(_hits)

	for _, k := range _keys {
		_raw = append(_raw, _pipe.HGetAll(ctx, k))
	}
	_, err = _pipe.Exec(ctx)
	if err != nil {
		return nil, err
	}

	for _, m := range _raw {
		v := m.Val()

		{{ range .TLsFields -}}
		{{ $raw := printf "v[%q]" .Name -}}
		{{ template "from-string.go.tmpl" newMarshallData . $raw .Name "nil" }}
		{{ end }}

		{{ $rcv }} := {{ $nsmodel }}{
			{{ range .TLsFields }}
			{{- .Name }}: {{ .Name }},
			{{ end }}
		}
		
		_results = append(_results, {{ $rcv }})
	}
	return _results, nil
}

{{ template "stringify-struct" . }}

// Utility type used for searching {{ $model }} models. Every field must be a pointer 
// to differentiate between zero-values and nil fields.
type {{ $findopt }} struct {
	{{ range .TPtrFields}}
	{{- . }}
	{{ end }}
}

{{- end }}

// Helper function to insert ':'s for redis keys.
func genKey(tags ...interface{}) string {
	n := len(tags)
	sl := []string{}
	for i := 0; i < n; i++ {
		sl = append(sl, "%v")
	}
	format := strings.Join(sl, ":")
	return fmt.Sprintf(format, tags...)
}

// Finds the intersection of n slices.
func intersect(slices [][]string) []string {
	if len(slices) == 1 {
		return slices[0]
	}

	head := make(map[string]bool)

	for _, v := range slices[0] {
		head[v] = true
	}
	for _, sl := range slices[1:] {
		var hits []string
		for _, v := range sl {
			_, ok := head[v]
			if ok {
				hits = append(hits, v)
			}
		}
		head = map[string]bool{}
		for _, v := range hits {
			head[v] = true
		}
	}

	var res []string
	for k := range head {
		res = append(res, k)
	}
	return res
}

// Bool stores v in a new bool value and returns a pointer to it.
func Bool(v bool) *bool { return &v }

// Int stores v in a new int value and returns a pointer to it.
func Int(v int) *int { return &v }

// Float32 stores v in a new float32 value and returns a pointer to it.
func Float32(v float32) *float32 { return &v }

// Float64 stores v in a new float64 value and returns a pointer to it.
func Float64(v float64) *float64 { return &v }

// String stores v in a new string value and returns a pointer to it.
func String(v string) *string { return &v }