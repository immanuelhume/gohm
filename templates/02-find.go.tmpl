{{- define "find-many" -}}

{{ $model := .Name.Name -}}
{{ $nsmodel := printf "%s.%s" .Pkg.Name .Name.Name -}}
{{ $numodel := lowerFirst .Name.Name -}}
{{ $rcv := toReceiverCase .Name.Name -}}
{{ $findopt := printf "%s%s" $model "FindOpt" -}}

// FindMany returns a slice of all {{ $model }} models which fulfill the provided conditions.
func({{ $rcv }} *{{ $model }}) FindMany(ctx context.Context, options *{{ $findopt }}) ([]{{ $nsmodel }}, error) {
	_v := reflect.ValueOf(options).Elem()
	_t := _v.Type()

	var _raw []*redis.StringStringMapCmd
	var _results []{{ $nsmodel }}

	_pipe := {{ $rcv }}.rdb.Pipeline()

	_cmds := cmdsFromFindOpt(ctx, _pipe, "{{ $model }}", _v, _t)
	_, err := _pipe.Exec(ctx)
	if err != nil {
		return nil, err
	}

	_keys := keyHits(_cmds)

	for _, k := range _keys {
		_raw = append(_raw, _pipe.HGetAll(ctx, k))
	}
	_, err = _pipe.Exec(ctx)
	if err != nil {
		return nil, err
	}

	for _, m := range _raw {
		v := m.Val()
		_{{ $numodel }}, err := parse{{ .Name }}(v)
		if err != nil {
			return nil, err
		}
		_results = append(_results, _{{ $numodel }})
	}
	return _results, nil
}

{{- end -}}