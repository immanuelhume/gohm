{{ $nsmodel := printf "%s.%s" .Pkg.Name .Name.Name -}}
{{ $numodel := lowerFirst .Name.Name -}}
{{ $in := toReceiverCase .Name.Name -}}

// stringify{{ .Name}} takes a {{ .Name }} struct and returns a map with each field stringified.
func stringify{{ .Name }}({{ $in }} *{{ $nsmodel }}) (map[string]interface{}, error) {
	_vMap := make(map[string]interface{})

	{{ range .Fields -}}
	{{ $raw := printf "%s.%s" $in .Name -}}
	{{ TStringifyField "_vMap" . $raw }}
	{{ end }}

	return _vMap, nil
}

// parse{{ .Name }} parses a {{ $nsmodel }} type from Redis data.
func parse{{ .Name }}(raw map[string]string) ({{ $nsmodel }}, error) {
	{{ range .Fields -}}
	{{ $raw := printf "raw[%q]" .Name -}}
	{{ $onError := printf "%s{}" $nsmodel -}}
	{{ TParseField . $raw $onError }}
	{{ end -}}

	_{{ $numodel }} := {{ $nsmodel }}{
		{{ range .Fields -}}
		{{ .Name }}: {{ .Name }},
		{{ end -}}
	}
	return _{{ $numodel }}, nil
}