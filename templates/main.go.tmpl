package gohm

import (
	"context"
	"fmt"
	"reflect"
	"strconv"
	"strings"

	"github.com/go-redis/redis/v8"
	"github.com/google/uuid"

	{{ .TemplateImports }}
)

type GohmClient struct {
	*redis.Client

	{{ .TemplateGohmFields }}
}

// Works just like redis.NewClient and returns a Redis client.
func NewClient(opt *redis.Options) *GohmClient {
	redisClient := redis.NewClient(opt)

	gohmClient := &GohmClient{
		redisClient, 
		{{ range .Entities -}}
		&{{ .Name.Name }}{rdb: redisClient},
		{{ end }}
		}
	
	return gohmClient
}

{{ range .Entities }}
{{ $lower := toLower .Name.Name }}
{{ $rcv := toReceiverCase .Name.Name}}
{{ $ns := .NamespacedEntity }}
type {{ .Name.Name }} struct {
	rdb *redis.Client
}

// Saves one {{ .Name.Name }} into Redis. Returns either an error or nil.
func({{ $rcv }} *{{ .Name.Name }}) Save(ctx context.Context, {{ $lower }} *{{ .NamespacedEntity }}) error {
	pipe := {{ $rcv }}.rdb.Pipeline()
	enKey := genKey("{{ .Name.Name }}", uuid.NewString())
	{{ $lower }}Map := mapStruct({{ $lower }})
	for k, v := range {{ $lower }}Map {
		pipe.SAdd(ctx, genKey("{{ .Name.Name }}", k, v), enKey)
	}
	pipe.HSet(ctx, enKey, {{ $lower }}Map)
	_, err := pipe.Exec(ctx)
	return err
}

// Returns as a slice all {{ .Name.Name }}(s) which fulfill the provided filter conditions.
func({{ $rcv }} *{{ .Name.Name }}) FindMany(ctx context.Context, filter *{{ .Name.Name }}Filter) ([]{{ .NamespacedEntity }}, error) {
	v := reflect.ValueOf(filter).Elem()
	t := reflect.TypeOf(filter).Elem()

	pipe := {{ $rcv }}.rdb.Pipeline()
	var cmds []*redis.StringSliceCmd
	var hits [][]string

	var raw []*redis.StringStringMapCmd
	var _results []{{ .NamespacedEntity }}

	for i := 0; i < v.NumField(); i++ {
		val := v.Field(i)
		if val.IsNil() {
			continue
		}
		field := t.Field(i).Name

		key := genKey("{{ .Name.Name }}", field, val.Elem())
		cmds = append(cmds, pipe.SMembers(ctx, key))
	}

	_, err := pipe.Exec(ctx)
	if err != nil {
		return []{{ .NamespacedEntity }}{}, err
	}

	for _, cmd := range cmds {
		hits = append(hits, cmd.Val())
	}
	keys := intersect(hits...)

	for _, k := range keys {
		raw = append(raw, pipe.HGetAll(ctx, k))
	}
	_, err = pipe.Exec(ctx)
	if err != nil {
		return []{{ .NamespacedEntity }}{}, err
	}

	for _, m := range raw {
		v := m.Val()

		{{ range .LsFields -}}
		{{ $raw := .Name | printf "v[%q]" -}}
		{{ template "from-string.go.tmpl" newMarshallData . $raw .Name "nil" }}
		{{ end }}

		{{ $rcv }} := {{ .NamespacedEntity }}{
			{{ range .LsFields }}
			{{- .Name }}: {{ .Name }},
			{{ end }}
		}
		
		_results = append(_results, {{ $rcv }})
	}
	return _results, nil
}

// Utility type used for searching {{ .Name.Name }} entities. Every field
// must be a pointer to differentiate between zero-values and nil fields.
type {{ .Name.Name }}Filter struct {
	{{ range .PtrFields}}
	{{- . }}
	{{ end }}
}
{{ end }}

// For use in redis.HSet. Produces a map from the fields of a struct.
func mapStruct(i interface{}) map[string]interface{} {
	v := reflect.ValueOf(i)
	if v.Kind() == reflect.Ptr {
		v = v.Elem()
	}
	t := v.Type()

	res := make(map[string]interface{})
	for i := 0; i < v.NumField(); i++ {
		res[t.Field(i).Name] = v.Field(i).Interface()
	}
	return res
}

// Helper function to insert ':' for redis keys.
func genKey(tags ...interface{}) string {
	n := len(tags)
	sl := []string{}
	for i := 0; i < n; i++ {
		sl = append(sl, "%v")
	}
	format := strings.Join(sl, ":")
	return fmt.Sprintf(format, tags...)
}

// Finds the intersection of n slices.
func intersect(slices ...[]string) []string {
	if len(slices) == 1 {
		return slices[0]
	}

	head := make(map[string]bool)
	// store first elem in a map
	for _, v := range slices[0] {
		head[v] = true
	}
	for _, sl := range slices[1:] {
		var hits []string
		for _, v := range sl {
			_, ok := head[v]
			if ok {
				hits = append(hits, v)
			}
		}
		head = map[string]bool{}
		for _, v := range hits {
			head[v] = true
		}
	}

	var res []string
	for k := range head {
		res = append(res, k)
	}
	return res
}

// Bool stores v in a new bool value and returns a pointer to it.
func Bool(v bool) *bool { return &v }

// Int stores v in a new int value and returns a pointer to it.
func Int(v int) *int { return &v }

// Float32 stores v in a new float32 value and returns a pointer to it.
func Float32(v float32) *float32 { return &v }

// Float64 stores v in a new float64 value and returns a pointer to it.
func Float64(v float64) *float64 { return &v }

// String stores v in a new string value and returns a pointer to it.
func String(v string) *string { return &v }